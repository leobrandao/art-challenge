{"version":3,"sources":["components/Item.js","components/AddNew.js","components/Column.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","item","showLeftArrow","showRightArrow","onPrevious","onNext","react_default","a","createElement","className","onClick","AddNew","columnName","addNewItem","Column","moveItem","items","prevColumn","nextColumn","move","orig","dest","map","components_Item","key","components_AddNew","App","state","Person 1","Person 2","Person 3","Person 4","newItem","window","prompt","columns","Object","objectSpread","_this","concat","toConsumableArray","setState","columnOrig","columnDest","filter","filteredItem","_this2","this","keys","index","components_Column","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54cab3a3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Item = ({ item, showLeftArrow, showRightArrow, onPrevious, onNext }) => (\n  <li>\n    {showLeftArrow && <span className=\"arrow--left\" onClick={onPrevious}>&lt;</span>}\n    {item}\n    {showRightArrow && <span className=\"arrow--right\" onClick={onNext}>&gt;</span>}\n  </li>\n);\n\nexport default Item;\n","import React from \"react\";\nconst AddNew = ({ columnName, addNewItem }) => (\n  <button className=\"add-new-item\" onClick={() => addNewItem(columnName)}>\n    Add New Item\n  </button>\n);\n\nexport default AddNew;\n","import React from \"react\";\nimport Item from \"./Item\";\nimport AddNew from \"./AddNew\";\n\nconst Column = ({addNewItem, moveItem, items, columnName, prevColumn, nextColumn}) => {\n  const move = (item, orig, dest) => () => moveItem(item, orig, dest);\n  return (\n    <div className=\"col-sm kanban--col\">\n      <h2>{columnName}</h2>\n      <ul>\n        {items.map(item => (\n          <Item\n            key={item}\n            item={item}\n            onPrevious={move(item, columnName, prevColumn)}\n            onNext={move(item, columnName, nextColumn)}\n            showLeftArrow={!!prevColumn}\n            showRightArrow={!!nextColumn}\n          />\n        ))}\n      </ul>\n      <AddNew addNewItem={addNewItem} columnName={columnName} />\n    </div>\n  );\n};\n\nexport default Column;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nimport Column from \"./components/Column\";\n\nclass App extends React.Component {\n  state = {\n    \"Person 1\": [\"Item 1\", \"Item 2\", \"Item 3\"],\n    \"Person 2\": [\"Item 4\", \"Item 5\", \"Item 6\"],\n    \"Person 3\": [\"Item 7\", \"Item 8\", \"Item 9\"],\n    \"Person 4\": [\"Item 10\", \"Item 11\", \"Item 12\"]\n  };\n\n  addNewItem = columnName => {\n    let newItem = window.prompt(\"Enter New Item to \" + columnName);\n    if (newItem === null || newItem === \"\") return;\n    const columns = { ...this.state };\n\n    columns[columnName] = [...columns[columnName], newItem];\n\n    this.setState(columns);\n  };\n\n  moveItem = (item, columnOrig, columnDest) => {\n    if (!columnDest) return;\n\n    const columns = { ...this.state };\n\n    columns[columnDest] = [...columns[columnDest], item];\n    columns[columnOrig] = columns[columnOrig].filter(\n      filteredItem => filteredItem !== item\n    );\n\n    this.setState(columns);\n  };\n\n  render() {\n    const columns = this.state;\n    const keys = Object.keys(columns);\n    return (\n      <div className=\"container\">\n        <h1 className=\"app--title\">Kanban Challenge</h1>\n        <div className=\"row\">\n          {keys.map((key, index) => (\n            <Column\n              key={key}\n              addNewItem={this.addNewItem}\n              moveItem={this.moveItem}\n              columnName={key}\n              items={columns[key]}\n              prevColumn={keys[index - 1]}\n              nextColumn={keys[index + 1]}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}